{
    "version": "https://jsonfeed.org/version/1",
    "title": "Blog",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": "by Pedro Mata Rodrigues",
    "icon": "http://localhost:4000/apple-touch-icon.png",
    "favicon": "http://localhost:4000/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "pmatarodrigues",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "http://localhost:4000/a/software-testing-why-and-how-to-make-them",
            "title": "on software testing",
            "summary": "time is scarce and everything must be done at the speed of light, there's no time for testing. the thing is, the time you spent writing tests now, is the time you'll save later",
            "content_text": "it’s way harder to find a nice tutorial about testing, in comparison to tutorials about tools or languages or frameworks, and that’s maybe because nobody is looking for ways to improve their ability in writing automated tests.the truth is that we all want to get the job done, especially when working on side projects or on small companies, where getting the job done is much more important than the quality of the code we write.I’ve met a lot of software developers that do not write any tests, despite this being one of the best ways for building maintainable software. I understand them, because I was one of those that can’t waste time on something that will not be on the final product.time is scarce and everything must be done at the speed of light, there’s no time for testing. the thing is, the time you spent writing tests now, is the time you’ll save later fixing bugs and rewriting your old code.but why should you write tests?  tests are not for nowtests should not be written just because of your current features, but with the thinking that you’ll have to add many more and those can break your previous code. this step will make it faster and easier to check that those changes do not break anything.  they faster and more efficient than manual testsit’s pretty hard for a developer to remember every feature that needs to be tested before marking that code as safe. this is especially true when it’s something that’s been worked on for the same people for a long time, which means new developers will have a hard time trying to work on that without breaking old things and without requiring manual testing by the old developers.  improve code qualityif every function and class need to have unit tests, developers must weight their decisions and think about architecture and code structure before starting to code.  minimize bugs and avoid risksbugs should definitely not make it to production. if this happens, the cost of fixing it is many times higher than the cost of fixing it on implementation. of course this is not at all easy to find, but with automated tests the possibility of finding implementation bugs is higher than without them.conclusiontests have a fundamental part on software developing, not only because of performance improvements and code quality and stability, but also because of long-term cost and risk reduction.and don’t forget: tests are supposed to fail at first, that way you know some change you implemented is not working as supposed and is changing how others features are working.",
            "content_html": "<p>it’s way harder to find a nice tutorial about testing, in comparison to tutorials about tools or languages or frameworks, and that’s maybe because nobody is looking for ways to improve their ability in writing automated tests.</p><p>the truth is that we all want to get the job done, especially when working on side projects or on small companies, where getting the job done is much more important than the quality of the code we write.</p><p>I’ve met a lot of software developers that do not write any tests, despite this being <strong>one of the best ways for building maintainable software</strong>. I understand them, because I was one of those that can’t waste time on something that will not be on the final product.</p><p>time is scarce and everything must be done at the speed of light, there’s no time for testing. the thing is, <strong>the time you spent writing tests now, is the time you’ll save later</strong> fixing bugs and rewriting your old code.</p><p><img src=\"https://media.giphy.com/media/FOHj4MpT2PLm8/giphy.gif\" alt=\"aint nobody got time for that\" /></p><h1 id=\"but-why-should-you-write-tests\">but why should you write tests?</h1><ul>  <li><strong>tests are not for now</strong></li></ul><p>tests should not be written just because of your current features, but with the thinking that you’ll have to add many more and those can break your previous code. this step will make it faster and easier to check that those changes do not break anything.</p><ul>  <li><strong>they faster and more efficient than manual tests</strong></li></ul><p>it’s pretty hard for a developer to remember every feature that needs to be tested before marking that code as safe. this is especially true when it’s something that’s been worked on for the same people for a long time, which means new developers will have a hard time trying to work on that without breaking old things and without requiring manual testing by the old developers.</p><ul>  <li><strong>improve code quality</strong></li></ul><p>if every function and class need to have unit tests, developers must weight their decisions and think about architecture and code structure before starting to code.</p><ul>  <li><strong>minimize bugs and avoid risks</strong></li></ul><p>bugs should definitely not make it to production. if this happens, the cost of fixing it is many times higher than the cost of fixing it on implementation. of course this is not at all easy to find, but with automated tests the possibility of finding implementation bugs is higher than without them.</p><h1 id=\"conclusion\">conclusion</h1><p>tests have a fundamental part on software developing, not only because of performance improvements and code quality and stability, but also because of long-term cost and risk reduction.</p><p>and don’t forget: tests are supposed to fail at first, that way you know some change you implemented is not working as supposed and is changing how others features are working.</p>",
            "url": "http://localhost:4000/a/software-testing-why-and-how-to-make-them",
            
            
            
            
            
            "date_published": "2021-07-29T00:00:00+01:00",
            "date_modified": "2021-07-29T00:00:00+01:00",
            
                "author":  {
                "name": "pmatarodrigues",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/a/do-not-store-your-api-keys-on-frontend",
            "title": "Do NOT Store your API Keys on Frontend",
            "summary": "Multiple times I'm asked what is the best way to store and access Secret Keys - such as API keys - on a React application.  There's a couple of things you can do to \\\"hide\\\" your keys and actually make them harder to access",
            "content_text": "Multiple times I’m asked what is the best way to store and access Secret Keys - such as API keys - on frontend (React, Vue, etc…)There’s a couple of things you can do to “hide” your keys and actually make them harder to access. What most people will say when asked this question is to use Environment Variables. They are not wrong but, in my opinion, also not entirely right.Create a .env file, put sensitive information there and access those variables from your code. That file should always be kept away from source control, like Github, so that’s already one advantage against using variables directly on the code. But there’s a couple of problems related to this method.  You should never store your API Keys on Frontend.  First, when you build the project in order to use it in production, those variables will stay somewhere on the bundled code, which means that anyone with access to that code will be able to dig through it and possibly find what your secret key is.Secondly, if these are API keys, those keys will always be visible on any request, either GET or POST, because request data is visible directly through the browser. Every time a request is made on the frontend, someone could just open browser’s network tab and easily visualize the API key.The solutionThe truth is that none of these previously described methods will completely hide your secrets from unwanted eyes. What I usually do is send a request to my own Backend API, which will then request the third-party API, process the received data and send it back to the client.This way we can keep our secret variables actually secret. Using this method, it is still recommended the use of Environment Variables, in order to keep keys away from source control.If you have any questions and suggestions regarding this post, or just want to follow me for more of these, I’m on Twitter, Github and Linkedin.",
            "content_html": "<p>Multiple times I’m asked what is the <strong>best way to store and access</strong> <strong>Secret Keys</strong> - such as API keys - on frontend (React, Vue, etc…)</p><p>There’s a couple of things you can do to “hide” your keys and actually make them harder to access. What most people will say when asked this question is to use <strong>Environment Variables</strong>. They are not wrong but, in my opinion, also not entirely right.</p><p>Create a <code>.env</code> file, put sensitive information there and access those variables from your code. That file should always be kept away from source control, like Github, so that’s already one advantage against using variables directly on the code. But there’s a <strong>couple of problems</strong> related to this method.</p><blockquote>  <p>You should never store your API Keys on Frontend.</p>  <p><img src=\"https://media.giphy.com/media/Y4Jb8jkcqRtnznTnpC/giphy.gif\" alt=\"Never\" /></p></blockquote><p>First, when you build the project in order to use it in production, those variables will stay somewhere on the bundled code, which means that anyone with access to that code will be able to dig through it and possibly find what your secret key is.</p><p>Secondly, if these are API keys, those keys will always be visible on any request, either GET or POST, because request data is visible directly through the browser. Every time a request is made on the frontend, someone could just open browser’s network tab and easily visualize the API key.</p><h2 id=\"the-solution\">The solution</h2><p>The truth is that none of these previously described methods will completely hide your secrets from unwanted eyes. What I usually do is send a request to my own Backend API, which will then request the third-party API, process the received data and send it back to the client.</p><p><img src=\"/assets/images/store-secret-api-keys.png\" alt=\"\" /></p><p>This way we can keep our secret variables actually secret. Using this method, it is still recommended the use of Environment Variables, in order to keep keys away from source control.</p><p>If you have any questions and suggestions regarding this post, or just want to follow me for more of these, I’m on <a href=\"https://twitter.com/pmatarodrigues\">Twitter</a>, <a href=\"https://github.com/pmatarodrigues\">Github</a> and <a href=\"https://linkedin.com/in/pmatarodrigues\">Linkedin</a>.</p>",
            "url": "http://localhost:4000/a/do-not-store-your-api-keys-on-frontend",
            
            
            
            
            
            "date_published": "2021-02-28T00:00:00+00:00",
            "date_modified": "2021-02-28T00:00:00+00:00",
            
                "author":  {
                "name": "pmatarodrigues",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/a/financial-portfolio-tracker-introduction-architecture",
            "title": "Building a Financial Portfolio Tracker - Introduction and Architecture",
            "summary": "I decided to embrace in a new side project, something that could be large enough to cover all the areas needed in software development.  A short - and lonely - brainstorm led to an idea that can be expanded almost infinitely. I decided to build a Financial Portfolio Manager",
            "content_text": "Hello There!The number of frameworks and programming languages is increasing and, as I needed to solidify and diversify my knowledge in order to understand what would catch my attention,I decided to embrace in a new side project, something that could be large enough to cover all the areas needed in software development.A short - and lonely - brainstorm led to an idea that can be expanded almost infinitely. I decided to build a Financial Portfolio Tracker.A platform like this could scale to a high number of requirements if I wanted to continue with it, but at the same time it was perfect for a small and steady start.  This post is written in the present, as I’m writing as things are advancing, and every new post will be related to each achieved checkpoint.Project ArchitectureStarting this project with the mindset of creating something that could be used to improve my knowledge means that every step should be taken having in mind a correct software development process. So… No skipping steps.With this in mind, I’m starting with a basic diagram of the technological stack I’m using. This can be changed in the future if I realize that some things can be improved. This is a learning process after all.Database ArchitectureI sketched an initial and pretty basic database diagram to serve as base for this project, it’s main components being User (user data and login information), Account (bank, exchange account, under the mattress or some place where the user keeps its money), Holding (what that account holds. for example EUR, USD, Stocks, Crypto, etc..) and Checkpoints. This last table will be mainly used to build evolution diagrams with the main goal of learning about Big Data in the future.FrontendFor frontend, React with Typescript were the chosen ones. Because I have some experience in developing React projects and wanted all the benefits that Typescript provides, mainly related to static typing (in contrary to Javascript that uses dynamic typing), which leads to faster detection of bugs before runtime and better readability.Frontend code was generated using Create React App, which is stated as a “comfortable environment for learning React”, this means that it’s not the best for large scale usage but it’s enough for the type of project that I’m trying to build. Create React App is powered by babel and webpack, so choosing this tool actually removes some of their complexity but also means that I skipped some useful learning. (I’ll probably do it in the next couple of projects ^^)CSS is left to TailwindCSS. I absolutely fell in love with it the first time I used it. The time it saves and the simplicity necessary for building some component are some major advantages in comparison to regular css and even scss. The only downside I found is the amount of code that stays on the html side, which is one thing I’m currently studying in order to better understand how it can be overcome.This is its first look. I’m still trying to play a bit with positioning and colours but it’s not bad for a first sketch. (Do not make fun of my income, I’m slowly working it out  )Next StepThis first step was mainly focused on exposing the project and introducing what my main goals are and what will be necessary for this to be built. In the next post, I’ll write about the backend part and how the connection between the two will be made.Find out on the next episode Building a Financial Portfolio Tracker part ^^Thank you for reading.Continuing…If you have any questions regarding this post (or just want to follow me), I’m on Twitter, Github and Linkedin.",
            "content_html": "<p><em>Hello There!</em></p><p>The number of frameworks and programming languages is increasing and, as I needed to solidify and diversify my knowledge in order to understand what would catch my attention,</p><p>I decided to embrace in a new side project, something that could be large enough to cover all the areas needed in software development.A short - and lonely - brainstorm led to an idea that can be expanded almost infinitely. I decided to build a Financial Portfolio Tracker.</p><p>A platform like this could scale to a high number of requirements if I wanted to continue with it, but at the same time it was perfect for a small and steady start.</p><blockquote>  <p>This post is written in the present, as I’m writing as things are advancing, and every new post will be related to each achieved checkpoint.</p></blockquote><h2 id=\"project-architecture\">Project Architecture</h2><p>Starting this project with the mindset of creating something that could be used to improve my knowledge means that every step should be taken having in mind a correct software development process. So… No skipping steps.</p><p>With this in mind, I’m starting with a basic diagram of the technological stack I’m using. This can be changed in the future if I realize that some things can be improved. This is a learning process after all.</p><p><img src=\"/assets/images/architecture.png\" alt=\"\" title=\"architecture\" /></p><h2 id=\"database-architecture\">Database Architecture</h2><p><img src=\"/assets/images/db_diagram.png\" alt=\"\" /></p><p>I sketched an initial and pretty basic database diagram to serve as base for this project, it’s main components being User (user data and login information), Account (bank, exchange account, under the mattress or some place where the user keeps its money), Holding (what that account holds. for example EUR, USD, Stocks, Crypto, etc..) and Checkpoints. This last table will be mainly used to build evolution diagrams with the main goal of learning about Big Data in the future.</p><h2 id=\"frontend\">Frontend</h2><p>For frontend, <a href=\"https://reactjs.org/\">React</a> with <a href=\"https://www.typescriptlang.org/\">Typescript</a> were the chosen ones. Because I have some experience in developing React projects and wanted all the benefits that Typescript provides, mainly related to static typing (in contrary to Javascript that uses dynamic typing), which leads to faster detection of bugs before runtime and better readability.</p><p>Frontend code was generated using <a href=\"https://reactjs.org/docs/create-a-new-react-app.html\">Create React App</a>, which is stated as a “<em>comfortable environment for learning React</em><strong>”,</strong> this means that it’s not the best for large scale usage but it’s enough for the type of project that I’m trying to build. Create React App is powered by babel and webpack, so choosing this tool actually removes some of their complexity but also means that I skipped some useful learning. (I’ll probably do it in the next couple of projects ^^)</p><p>CSS is left to <a href=\"https://tailwindcss.com/\">TailwindCSS</a>. I absolutely fell in love with it the first time I used it. The time it saves and the simplicity necessary for building some component are some major advantages in comparison to regular css and even scss. The only downside I found is the amount of code that stays on the html side, which is one thing I’m currently studying in order to better understand how it can be overcome.</p><p>This is its first look. I’m still trying to play a bit with positioning and colours but it’s not bad for a first sketch. (Do not make fun of my income, I’m slowly working it out  )</p><p><img src=\"/assets/images/2021-02-25_02-43.png\" alt=\"\" /></p><h2 id=\"next-step\">Next Step</h2><p>This first step was mainly focused on exposing the project and introducing what my main goals are and what will be necessary for this to be built. In the next post, I’ll write about the backend part and how the connection between the two will be made.</p><p>Find out on the next <del>episode</del> <strong><em>Building a Financial Portfolio Tracker</em></strong> part ^^</p><p>Thank you for reading.</p><h4 id=\"continuing\">Continuing…</h4><p>If you have any questions regarding this post (or just want to follow me), I’m on <a href=\"https://twitter.com/pmatarodrigues\">Twitter</a>, <a href=\"https://github.com/pmatarodrigues\">Github</a> and <a href=\"https://linkedin.com/in/pmatarodrigues\">Linkedin</a>.</p>",
            "url": "http://localhost:4000/a/financial-portfolio-tracker-introduction-architecture",
            
            
            
            
            
            "date_published": "2021-02-15T00:00:00+00:00",
            "date_modified": "2021-02-15T00:00:00+00:00",
            
                "author":  {
                "name": "pmatarodrigues",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/a/building-a-twitter-clone-with-phoenix-elixir",
            "title": "Building a Twitter Clone with Phoenix (Elixir)",
            "summary": "Phoenix is a web development framework written in Elixir which implements the Model – View – Controller (MVC) pattern. Phoenix is a lot of times compared with other web frameworks like Ruby on Rails and Django",
            "content_text": "  (Work in Progress)  This blog post is being updated as i’m progressing through the project and implementing new features and learning new thingsPreparing Project1. Install latest Phoenix version (from github, with special features)$ git clone https://github.com/phoenixframework/phoenix.git$ cd phoenix/installer$ mix archive.install2. Create the project (tuita is project’s name)$ mix phx.new tuita --live3. Configure projectTimeline is the main field, which will be composed of Tuites (called tuites on the database, and will contain the fields marked as bold on the command (username, body, fav_count and retuite_count).$ mix phx.gen.live Timeline Tuite tuites username body fav_count:integer retuite_count:integer4. Add live routes to scope    live \"/tuites\", TuiteLive.Index, :index    live \"/tuites/new\", TuiteLive.Index, :new    live \"/tuites/:id/edit\", TuiteLive.Index, :edit    live \"/tuites/:id\", TuiteLive.Show, :show    live \"/tuites/:id/show/edit\", TuiteLive.Show, :edit5. Create and migrate Database$ mix ecto.create$ mix ecto.migrate6. Running server$ mix phx.serverNow we visit localhost:4000 and there it is, our newly (and ridiculously fast) created blog style website with live update. As simple as that.Project Structure  _build  assets  config  deps  lib          tuita                  timeline (the one we previously set as the main container)                          tuite.ex (configuration of each tuite)                                (…)                    tuita_web                  controllers          live                          here we can configure each components presentation format                                templates          views          (…)                    tuita.ex      tuita_web.ex        priv  test  (…)Input ValidationAfter removing the unnecessary fields from form_component.html.leex and leaving just the body, proceeding to the validation of those fields on tuite.ex. Adding validation is as simple as modifying the following lines on that file:      @doc false      def changeset(tuite, attrs) do        tuite        |&gt; cast(attrs, [:body])        |&gt; validate_required([:body])        |&gt; validate_length(:body, min: 2, max: 275)      endLive UpdatesWorking with this Phoenix’s LiveView module allows us to automatically render the page with the newly created data, without the need to completely refresh the page. Using LiveView, only the necessary data is passed on this broadcast, keeping the internet usage pretty low.Resources  Gigalixir  (Work in Progress)  This blog post is being updated as i’m progressing through the project and implementing new features and learning new things",
            "content_html": "<blockquote>  <p><em>(Work in Progress)</em></p>  <p>This blog post is being updated as i’m progressing through the project and implementing new features and learning new things</p></blockquote><h2 id=\"preparing-project\">Preparing Project</h2><h3 id=\"1-install-latest-phoenix-version-from-github-with-special-features\">1. Install latest Phoenix version (from github, with special features)</h3><p><code>$ git clone </code><a href=\"https://github.com/phoenixframework/phoenix.git\" title=\"https://github.com/phoenixframework/phoenix.git\"><code>https://github.com/phoenixframework/phoenix.git</code></a><code>$ cd phoenix/installer</code><code>$ mix archive.install</code></p><h3 id=\"2-create-the-project-tuita-is-projects-name\">2. Create the project (<strong>tuita</strong> is project’s name)</h3><p><code>$ mix phx.new </code><strong><code>tuita</code></strong><code> --live</code></p><h3 id=\"3-configure-project\">3. Configure project</h3><p><strong>Timeline</strong> is the main field, which will be composed of <strong>Tuites</strong> (called <em>tuites</em> on the database, and will contain the fields marked as bold on the command (username, body, fav_count and retuite_count).</p><p><code>$ mix phx.gen.live Timeline Tuite tuites </code><strong><code>username body fav_count:integer retuite_count:integer</code></strong></p><h3 id=\"4-add-live-routes-to-scope\">4. Add live routes to scope</h3><pre><code class=\"language-elixir\">    live \"/tuites\", TuiteLive.Index, :index    live \"/tuites/new\", TuiteLive.Index, :new    live \"/tuites/:id/edit\", TuiteLive.Index, :edit    live \"/tuites/:id\", TuiteLive.Show, :show    live \"/tuites/:id/show/edit\", TuiteLive.Show, :edit</code></pre><h3 id=\"5-create-and-migrate-database\">5. Create and migrate Database</h3><p><code>$ mix ecto.create</code></p><p><code>$ mix ecto.migrate</code></p><h3 id=\"6-running-server\">6. Running server</h3><p><code>$ mix phx.server</code></p><p>Now we visit <strong>localhost:4000</strong> and there it is, our newly (and ridiculously fast) created blog style website with live update. As simple as that.</p><p><img src=\"https://ementa.test/wp-content/uploads/2020/09/image.png\" alt=\"\" /></p><h2 id=\"project-structure\">Project Structure</h2><ul>  <li>_build</li>  <li>assets</li>  <li>config</li>  <li>deps</li>  <li><strong>lib</strong>    <ul>      <li><strong>tuita</strong>        <ul>          <li><strong>timeline</strong> (the one we previously set as the main container)            <ul>              <li>tuite.ex (configuration of each tuite)</li>            </ul>          </li>          <li>(…)</li>        </ul>      </li>      <li><strong>tuita_web</strong>        <ul>          <li>controllers</li>          <li>live            <ul>              <li><em>here we can configure each components presentation format</em></li>            </ul>          </li>          <li>templates</li>          <li>views</li>          <li>(…)</li>        </ul>      </li>      <li>tuita.ex</li>      <li>tuita_web.ex</li>    </ul>  </li>  <li>priv</li>  <li>test</li>  <li>(…)</li></ul><h2 id=\"input-validation\">Input Validation</h2><p>After removing the unnecessary fields from <strong>form_component.html.leex</strong> and leaving just the body, proceeding to the validation of those fields on <strong>tuite.ex</strong>. Adding validation is as simple as modifying the following lines on that file:</p><pre><code class=\"language-elixir\">      @doc false      def changeset(tuite, attrs) do        tuite        |&gt; cast(attrs, [:body])        |&gt; validate_required([:body])        |&gt; validate_length(:body, min: 2, max: 275)      end</code></pre><h2 id=\"live-updates\">Live Updates</h2><p><img src=\"https://ementa.test/wp-content/uploads/2020/09/ezgif.com-video-to-gif.gif\" alt=\"\" /></p><p>Working with this Phoenix’s <strong><a href=\"https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html\">LiveView</a></strong> module allows us to automatically render the page with the newly created data, without the need to completely refresh the page. Using LiveView, only the necessary data is passed on this broadcast, keeping the internet usage pretty low.</p><h3 id=\"resources\">Resources</h3><ul>  <li><a href=\"https://hexdocs.pm/phoenix/gigalixir.html\">Gigalixir</a></li></ul><blockquote>  <p><em>(Work in Progress)</em></p>  <p>This blog post is being updated as i’m progressing through the project and implementing new features and learning new things</p></blockquote>",
            "url": "http://localhost:4000/a/building-a-twitter-clone-with-phoenix-elixir",
            
            
            
            
            
            "date_published": "2020-08-22T00:00:00+01:00",
            "date_modified": "2020-08-22T00:00:00+01:00",
            
                "author":  {
                "name": "pmatarodrigues",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/a/web-frameworks-why-is-it-so-hard-to-choose-one",
            "title": "Web Frameworks: Why is it so hard to choose one?",
            "summary": "Developing for web is easier than ever and the amount of tools and resources available is increasing at an intense rate.  One of the main decisions that has to be made at the start of every web project is if we're going to use a framework and if so, which one",
            "content_text": "Developing for web is easier than ever and the amount of tools and resources available is increasing at an intense rate.One of the main decisions that has to be made at the start of every web project is if we’re going to use a framework and if so, which one.There’s multiple factors that can influence the decision depending on which language we want to work, the type of problem we need to solve and how fast we need to do it. This series of blog posts will be accompanied with small projects that I’ll be working on to help me learn the languages and frameworks as I’m progressing, with the final goal of understanding which one is the best framework for each case.Express with ReactJSExpress is a minimal and flexible JavaScript framework that provides a set of features for web and mobile applications.Express facilitates the rapid development of Node.js based web applications. Contains a great amount of HTTP utility methods ready to use, it’s easy to create a complex and robust API with it.flutter-705x397Express facilitates the rapid development of Node.js based web applications. Contains a great amount of HTTP utility methods ready to use, it’s easy to create a complex and robust API with it.I’ll start this journey with a private shopping list with some additional features using the MERN stack (Mongo Express React Node).My example: shareat.online(Working on blog post about it :D )PhoenixPhoenix is a web development framework written in Elixir which implements the Model - View - Controller (MVC) pattern. Phoenix is a lot of times compared with other web frameworks like Ruby on Rails and DjangoPhoenix provides high performance along with tools that give the chance to build projects at a faster pace. Phoenix also allows the use of real-time features and pre-compiled templates, which can make the development way faster.My example: Work in Progress(Working on blog post about it :D )Ruby on RailsRuby on Rails (or Rails) is a web development framework that is particularly notable for its easy maintenance and the fact that it lends itself to collaboration. Rails follows two major points: DRY (Do Not Repeat Yourself) and Convention Over Configuration.Following this key points, this framework cuts down the time of re-coding repetitive tasks and helps developers keep their code cleaner and easier to troubleshoot when dealing with problems.DjangoDjango is a high-level Python web framework that encourages rapid development and clean design.Django was designed to help developers take applications from concept to completion in record time and with security and scalability in mind.Resources  http://expressjs.com/  https://github.com/expressjs/express  https://dev.to/theankitsinha/what-is-a-web-framework-and-which-one-you-should-use-hnb  https://hexdocs.pm/phoenix/overview.html  https://www.toptal.com/phoenix/phoenix-rails-like-framework-web-apps  https://elixirschool.com/en/  https://rubyonrails.org/  https://guides.rubyonrails.org/getting_started.html  https://skillcrush.com/blog/13-ruby-rails/  https://www.rubyguides.com/2018/10/what-is-ruby-on-rails/  https://steelkiwi.com/blog/why-django-best-web-framework-your-project/  https://medium.com/@sagarajkt/what-is-django-and-why-is-it-used-2dafdc75ce67  https://github.com/django/django  https://www.djangoproject.com/",
            "content_html": "<p>Developing for web is easier than ever and the amount of tools and resources available is increasing at an intense rate.</p><p>One of the main decisions that has to be made at the start of every web project is if we’re going to use a framework and if so, which one.</p><p>There’s multiple factors that can influence the decision depending on <strong>which language</strong> we want to work, the <strong>type of problem</strong> we need to solve and <strong>how fast</strong> we need to do it. This series of blog posts will be accompanied with small projects that I’ll be working on to help me learn the languages and frameworks as I’m progressing, with the final goal of understanding which one is the best framework for each case.</p><p><img src=\"https://media.giphy.com/media/3o7TKUM3IgJBX2as9O/giphy.gif\" alt=\"\" /></p><h2 id=\"express-with-reactjs\">Express with ReactJS</h2><p><strong>Express</strong> is a minimal and flexible <strong>JavaScript</strong> framework that provides a set of features for web and mobile applications.</p><p>Express facilitates the rapid development of Node.js based web applications. Contains a great amount of HTTP utility methods ready to use, it’s easy to create a complex and robust API with it.flutter-705x397Express facilitates the rapid development of Node.js based web applications. Contains a great amount of HTTP utility methods ready to use, it’s easy to create a complex and robust API with it.</p><p>I’ll start this journey with a private shopping list with some additional features using the <strong>MERN stack (Mongo Express React Node).</strong></p><p><strong>My example:</strong> <a href=\"https://shareat.online\"><strong>shareat.online</strong></a></p><p>(<em>Working on blog post about it :D</em> )</p><h2 id=\"phoenix\">Phoenix</h2><p><strong>Phoenix</strong> is a web development framework written in <strong>Elixir</strong> which implements the <strong>Model - View - Controller</strong> (MVC) pattern. Phoenix is a lot of times compared with other web frameworks like Ruby on Rails and Django</p><p>Phoenix provides <strong>high performance</strong> along with tools that give the chance to build projects at a <strong>faster pace</strong>. Phoenix also allows the use of <strong>real-time</strong> features and <strong>pre-compile</strong>d templates, which can make the development way faster.</p><p><strong>My example:</strong> <a href=\"https://ementa.test/building-a-twitter-clone-with-phoenix-elixir/\">Work in Progress</a></p><p>(<em>Working on</em> <a href=\"https://ementa.test/building-a-twitter-clone-with-phoenix-elixir/\"><em>blog post</em></a> <em>about it :D</em> )</p><h2 id=\"ruby-on-rails\">Ruby on Rails</h2><p><strong>Ruby on Rails</strong> (or Rails) is a web development framework that is particularly notable for its <strong>easy maintenance</strong> and the fact that it lends itself to collaboration. Rails follows two major points: DRY (<strong>Do Not Repeat Yourself)</strong> and <strong>Convention Over Configuration.</strong></p><p>Following this key points, this framework <strong>cuts down the time</strong> of re-coding repetitive tasks and helps developers keep their <strong>code cleaner</strong> and <strong>easier to troubleshoot</strong> when dealing with problems.</p><h2 id=\"django\">Django</h2><p>Django is a high-level Python web framework that encourages <strong>rapid development</strong> and <strong>clean</strong> design.</p><p>Django was designed to help developers take applications from concept to completion in <strong>record time</strong> and with <strong>security</strong> and <strong>scalability</strong> in mind.</p><h2 id=\"resources\">Resources</h2><ul>  <li><a href=\"http://expressjs.com/\" title=\"http://expressjs.com/\">http://expressjs.com/</a></li>  <li><a href=\"https://github.com/expressjs/express\" title=\"https://github.com/expressjs/express\">https://github.com/expressjs/express</a></li>  <li><a href=\"https://dev.to/theankitsinha/what-is-a-web-framework-and-which-one-you-should-use-hnb\" title=\"https://dev.to/theankitsinha/what-is-a-web-framework-and-which-one-you-should-use-hnb\">https://dev.to/theankitsinha/what-is-a-web-framework-and-which-one-you-should-use-hnb</a></li>  <li><a href=\"https://hexdocs.pm/phoenix/overview.html\" title=\"https://hexdocs.pm/phoenix/overview.html\">https://hexdocs.pm/phoenix/overview.html</a></li>  <li><a href=\"https://www.toptal.com/phoenix/phoenix-rails-like-framework-web-apps\" title=\"https://www.toptal.com/phoenix/phoenix-rails-like-framework-web-apps\">https://www.toptal.com/phoenix/phoenix-rails-like-framework-web-apps</a></li>  <li><a href=\"https://elixirschool.com/en/\" title=\"https://elixirschool.com/en/\">https://elixirschool.com/en/</a></li>  <li><a href=\"https://rubyonrails.org/\" title=\"https://rubyonrails.org/\">https://rubyonrails.org/</a></li>  <li><a href=\"https://guides.rubyonrails.org/getting_started.html\" title=\"https://guides.rubyonrails.org/getting_started.html\">https://guides.rubyonrails.org/getting_started.html</a></li>  <li><a href=\"https://skillcrush.com/blog/13-ruby-rails/\" title=\"https://skillcrush.com/blog/13-ruby-rails/\">https://skillcrush.com/blog/13-ruby-rails/</a></li>  <li><a href=\"https://www.rubyguides.com/2018/10/what-is-ruby-on-rails/\" title=\"https://www.rubyguides.com/2018/10/what-is-ruby-on-rails/\">https://www.rubyguides.com/2018/10/what-is-ruby-on-rails/</a></li>  <li><a href=\"https://steelkiwi.com/blog/why-django-best-web-framework-your-project/\" title=\"https://steelkiwi.com/blog/why-django-best-web-framework-your-project/\">https://steelkiwi.com/blog/why-django-best-web-framework-your-project/</a></li>  <li><a href=\"https://medium.com/@sagarajkt/what-is-django-and-why-is-it-used-2dafdc75ce67\" title=\"https://medium.com/@sagarajkt/what-is-django-and-why-is-it-used-2dafdc75ce67\">https://medium.com/@sagarajkt/what-is-django-and-why-is-it-used-2dafdc75ce67</a></li>  <li><a href=\"https://github.com/django/django\" title=\"https://github.com/django/django\">https://github.com/django/django</a></li>  <li><a href=\"https://www.djangoproject.com/\" title=\"https://www.djangoproject.com/\">https://www.djangoproject.com/</a></li></ul>",
            "url": "http://localhost:4000/a/web-frameworks-why-is-it-so-hard-to-choose-one",
            
            
            
            
            
            "date_published": "2020-08-06T00:00:00+01:00",
            "date_modified": "2020-08-06T00:00:00+01:00",
            
                "author":  {
                "name": "pmatarodrigues",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/a/aws-rookie-1-setting-up-identity-and-access-management",
            "title": "AWS Rookie #1 - Setting up Identity and Access Management",
            "summary": "This is the start of my journey through AWS and I'll try to describe all of the things that helped me on this path. All the good resources, cool people and tools will be featured here",
            "content_text": "You know when you just get tired of everything else you’ve been working on the last few years and decide to start fresh?That’s not what happened to me.I still love what I do and I’ll keep working on my side projects and learning new languages and everything. It’s just that I’ve been reading a lot about the cloud architecture and I’m starting to feel like I need to invest in this.So, this is it. This is the start of my journey through AWS and I’ll try to describe all of the things that helped me on this path. All the good resources, cool people and tools will be featured here. Wish me luck \\o/IAM - Identity and Access ManagementThe Identity and Access Management (IAM) is a AWS service that enables you to manage the access to your AWS services and resources.With IAM you can control who has access to your AWS account, what type of access they have to what service and what actions can be executed.There’s a set of keywords that are crucial to understanding this service, as described below:  User - Normally is created to represent a person or application can interact with AWS.  Group - Is a collection of Users. Groups let you specify permissions for multiple users, which can make it easier to manage their permissions.  Role - Almost like a User. You can use roles to give access to users, applications, or services that don’t normally have access to your AWS resources.  Permission - Permissions let you establish access to AWS resources to IAM entities (users, groups, and roles). Without your permissions, entities can’t use anything on your AWS.  Policy - A policy defines the permissions are associated with some identity or resource. Policies consist of three attributes that define what type of access you have:          Effect - Allow or Deny permission      Action - API calls that can be made      Resource - Scope of entities that the policy rule covers      Best PracticesLock your account root user and create individual IAM usersThe root account access key gives full access to all the services and billing information, therefore root access should be handled very carefully.Enable multi-factor authentication for all usersMFA grants you another layer of protection. If some user’s access is compromised, there’s still another layer of security to be broken by some kind of attacker.Grant least privilege to users and resourcesGive your users and resources only the necessary permissions to perform the specific task that they’ll be working on.Configure a strong password policy for your usersEveryone should avoid “password” and “123456” passwords. Make your users choose strong ones, with numbers and special characters with minimum number of characters.Monitor activity in your AWS account and Remove unnecessary credentialsMonitoring your AWS logs can be useful to check the date and time of each users’ actions, and therefore review their permissions and remove credentials that aren’t related to them.Setup CloudTrailCloudTrail creates a “trail” of events for actions taken by a user, role, or an AWS service.Don’t commit credentials to gitThis one is just common sense actually.IAM may seem a really basic tool when you start using it, but as the complexity of your systems increases, so does the amount of attention you have to give to IAM.Hope you enjoyed this first chapter, stay tuned for more! ;DCool Resources  https://aws.amazon.com/blogs/security/  https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html  https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html  https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html  https://iam.cloudonaut.io/  https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html  https://aws.amazon.com/iam/features/mfa/?audit=2019q1  https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html  https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords.html  https://start.jcolemorrison.com/aws-iam-policies-in-a-nutshell/  https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords.html",
            "content_html": "<p>You know when you just get tired of everything else you’ve been working on the last few years and decide to start fresh?</p><p><strong>That’s not what happened to me</strong>.</p><p>I still love what I do and I’ll keep working on my side projects and learning new languages and everything. It’s just that I’ve been reading a lot about the <strong>cloud</strong> <strong>architecture</strong> and I’m starting to feel like I need to invest in this.</p><p>So, this is it. This is the start of my journey through <strong>AWS</strong> and I’ll try to describe all of the things that helped me on this path. All the <strong>good resources</strong>, <strong>cool people</strong> and <strong>tools</strong> will be featured here. Wish me luck \\o/</p><p><img src=\"https://media.giphy.com/media/RrVzUOXldFe8M/giphy.gif\" alt=\"\" /></p><h2 id=\"iam---identity-and-access-management\">IAM - Identity and Access Management</h2><p>The Identity and Access Management (IAM) is a AWS service that enables you to manage the access to your AWS services and resources.</p><p>With IAM you can control who has access to your AWS account, what type of access they have to what service and what actions can be executed.</p><p>There’s a set of keywords that are crucial to understanding this service, as described below:</p><ul>  <li><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users.html\">User</a> - Normally is created to represent a person or application can interact with AWS.</li>  <li><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups.html\">Group</a> - Is a collection of Users. Groups let you specify permissions for multiple users, which can make it easier to manage their permissions.</li>  <li><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\">Role</a> - Almost like a User. You can use roles to give access to users, applications, or services that don’t normally have access to your AWS resources.</li>  <li><a href=\"https://aws.amazon.com/iam/features/manage-permissions/\">Permission</a> - Permissions let you establish access to AWS resources to IAM entities (users, groups, and roles). Without your permissions, entities can’t use anything on your AWS.</li>  <li><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html\">Policy</a> - A policy defines the permissions are associated with some identity or resource. Policies consist of three attributes that define what type of access you have:    <ul>      <li>Effect - Allow or Deny permission</li>      <li>Action - API calls that can be made</li>      <li>Resource - Scope of entities that the policy rule covers</li>    </ul>  </li></ul><hr /><h2 id=\"best-practices\">Best Practices</h2><h4 id=\"lock-your-account-root-user-and-create-individual-iam-users\">Lock your account root user and create individual IAM users</h4><p>The root account access key gives full access to all the services and billing information, therefore root access should be handled very carefully.</p><h4 id=\"enable-multi-factor-authentication-for-all-users\">Enable multi-factor authentication for all users</h4><p>MFA grants you another layer of protection. If some user’s access is compromised, there’s still another layer of security to be broken by some kind of attacker.</p><h4 id=\"grant-least-privilege-to-users-and-resources\">Grant least privilege to users and resources</h4><p>Give your users and resources only the necessary permissions to perform the specific task that they’ll be working on.</p><h4 id=\"configure-a-strong-password-policy-for-your-users\">Configure a strong password policy for your users</h4><p>Everyone should avoid “password” and “123456” passwords. Make your users choose strong ones, with numbers and special characters with minimum number of characters.</p><h4 id=\"monitor-activity-in-your-aws-account-and-remove-unnecessary-credentials\">Monitor activity in your AWS account and Remove unnecessary credentials</h4><p>Monitoring your AWS logs can be useful to check the date and time of each users’ actions, and therefore review their permissions and remove credentials that aren’t related to them.</p><h4 id=\"setup-cloudtrail\">Setup CloudTrail</h4><p>CloudTrail creates a “trail” of events for actions taken by a user, role, or an AWS service.</p><h4 id=\"dont-commit-credentials-to-git\">Don’t commit credentials to git</h4><p>This one is just common sense actually.</p><hr /><p>IAM may seem a really basic tool when you start using it, but as the complexity of your systems increases, so does the amount of attention you have to give to IAM.</p><p>Hope you enjoyed this first chapter, stay tuned for more! ;D</p><h3 id=\"cool-resources\">Cool Resources</h3><ul>  <li><a href=\"https://aws.amazon.com/blogs/security/\" title=\"https://aws.amazon.com/blogs/security/\">https://aws.amazon.com/blogs/security/</a></li>  <li><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html\" title=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html\">https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html</a></li>  <li><a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\" title=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html</a></li>  <li><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\" title=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\">https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html</a></li>  <li><a href=\"https://iam.cloudonaut.io/\" title=\"https://iam.cloudonaut.io/\">https://iam.cloudonaut.io/</a></li>  <li><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html\" title=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html\">https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html</a></li>  <li><a href=\"https://aws.amazon.com/iam/features/mfa/?audit=2019q1\" title=\"https://aws.amazon.com/iam/features/mfa/?audit=2019q1\">https://aws.amazon.com/iam/features/mfa/?audit=2019q1</a></li>  <li><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html\" title=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html\">https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html</a></li>  <li><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords.html\" title=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords.html\">https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords.html</a></li>  <li><a href=\"https://start.jcolemorrison.com/aws-iam-policies-in-a-nutshell/\" title=\"https://start.jcolemorrison.com/aws-iam-policies-in-a-nutshell/\">https://start.jcolemorrison.com/aws-iam-policies-in-a-nutshell/</a></li>  <li><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords.html\" title=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords.html\">https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords.html</a></li></ul>",
            "url": "http://localhost:4000/a/aws-rookie-1-setting-up-identity-and-access-management",
            
            
            
            
            
            "date_published": "2020-07-26T00:00:00+01:00",
            "date_modified": "2020-07-26T00:00:00+01:00",
            
                "author":  {
                "name": "pmatarodrigues",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/a/flutter-reasons-why-you-will-fall-in-love-with-it",
            "title": "Flutter - Reasons Why You Will Fall In Love With It",
            "summary": "Google’s SDK is here, and it has a word to say in Mobile App development",
            "content_text": "At first sight, this may seem the name of some kind of butterfly, but it is Google’s new framework for building high-quality native apps for iOS and Android. If you’re a Mobile Developer, you should take a look at it as it’s going to change the way native apps are developed.Code once, run anywhereWith Flutter, you can code one time and run the same app for iOS and Android devices, and it’ll automatically adapt to each operative system.You’re probably thinking “What if I want to have different stuff on each device?”. — You can! Flutter gives you the possibility to adapt the code and UI of the app depending on which devices are being run.    theme: new ThemeData(    primaryColor:        Theme.of(context).platform == Target.Platform.iOS        ? Colors.grey[100]        : Colors.blue    )The above code changes the theme color to grey if the device used is running iOS and blue if it’s an Android device.The Usain Bolt Of Mobile App DevelopmentEverything is fast when using Flutter, from code writing to compiling.If you want to build an app as fast as possible without much complication you’ve found your way.UI CodeThe simplicity remains in how you only need one language for the whole app. Forget a huge load of files created when developing using Android Native.  Flutter’s widget is written in Dart language. So you have everything in the same file, without having to keep switching files to modify the UI and its functionality.The downside is the deeply nested code that you’ll need to write and edit when using Flutter.Moreover, when I say deeply nested code, I really mean it! Imagine all the conditionals, transformations, iterations, state reading, event handlers and the UI in the same functions.I know, right?This makes it unusable when you start working with it but gets easier as you start using it.Hot ReloadBesides that, Flutter has the fantastic Hot Reload feature that is a fast Dart Compiler technology that allows you to load code changes into a running app without losing its actual state. The changes are applied instantly in the running app.It’s not just fun and gamesFlutter Beta 2 was announced in April 2018, and there is no stable version yet. Which means that there’ll be changes and improvements that may demand changes on your code.Yes, it’s true that Google’s support to Flutter is impressive but, despite this fact, the amount of libraries available to be used with Flutter is still low. It would be very time-consuming for the developers to build the necessary libraries, which ultimately kills the primary purpose of Flutter.However there’s more…Dart…To develop Flutter apps, you’ll need to learn Dart or hire a Dart developer. It’s really not a hard thing to learn, and if you’re a developer you might like to learn as many languages as possible, but maybe you’ll lose some time trying to get used to it.Is it worth it?Flutter is fun and fast to code a well-designed app. Still has much room to improve to become a real opponent to Android Native.For a reasonably modern framework, Flutter has progressed remarkably quick and, surely it will have a word to say in the future for the Mobile App development.Is it ready to be applied to big scale apps? Likely not, but I’m expecting after these things are fixed, we can all enjoy Flutter!  Well, folks, that is all for now!This Blog Post was written during my internship at PICUS.",
            "content_html": "<p>At first sight, this may seem the name of some kind of butterfly, but it is <strong>Google’s new framework for building high-quality native apps</strong> for iOS and Android. If you’re a Mobile Developer, you should take a look at it as it’s going to change the way native apps are developed.</p><h2 id=\"code-once-run-anywhere\">Code once, run anywhere</h2><p>With Flutter, you can code one time and run the same app for iOS and Android devices, and it’ll automatically adapt to each operative system.</p><p>You’re probably thinking <em>“What if I want to have different stuff on each device?”.</em> — You can! Flutter gives you the possibility to adapt the code and UI of the app depending on which devices are being run.</p><pre><code class=\"language-dart\">    theme: new ThemeData(    primaryColor:        Theme.of(context).platform == Target.Platform.iOS        ? Colors.grey[100]        : Colors.blue    )</code></pre><p>The above code changes the theme color to grey if the device used is running iOS and blue if it’s an Android device.</p><h3 id=\"the-usain-bolt-of-mobile-app-development\">The Usain Bolt Of Mobile App Development</h3><p><img src=\"https://media.giphy.com/media/F0qo2FvhGIbXG/giphy.gif\" alt=\"\" /></p><p>Everything is fast when using Flutter, from code writing to compiling.</p><p>If you want to build an app as fast as possible without much complication you’ve found your way.</p><h2 id=\"ui-code\">UI Code</h2><p>The simplicity remains in how you only need one language for the whole app. Forget a huge load of files created when developing using Android Native.</p><blockquote>  <p>Flutter’s widget is written in Dart language. So you have everything in the same file, without having to keep switching files to modify the UI and its functionality.</p></blockquote><p>The downside is the <strong>deeply nested code</strong> that you’ll need to write and edit when using Flutter.</p><p>Moreover, when I say deeply nested code, <em>I really mean it</em>! Imagine all the conditionals, transformations, iterations, state reading, event handlers and the UI in the same functions.</p><p><em>I know, right?</em></p><p>This makes it <strong>unusable when you start</strong> working with it but gets easier as you start using it.</p><h2 id=\"hot-reload\">Hot Reload</h2><p>Besides that, Flutter has the fantastic <strong>Hot Reload</strong> feature that is a fast Dart Compiler technology that allows you to load code changes into a running app without losing its actual state. The changes are applied <strong>instantly</strong> in the running app.</p><h3 id=\"its-not-just-fun-and-games\">It’s not just fun and games</h3><p>Flutter Beta 2 was announced in April 2018, and there is no stable version yet. Which means that there’ll be changes and improvements that may demand changes on your code.</p><p>Yes, it’s true that Google’s support to Flutter is impressive but, despite this fact, the amount of libraries available to be used with Flutter is still low. It would be very time-consuming for the developers to build the necessary libraries, which ultimately kills the primary purpose of Flutter.</p><p>However there’s more…</p><h2 id=\"dart\">Dart…</h2><p>To develop Flutter apps, you’ll need to learn Dart or hire a Dart developer. It’s really not a hard thing to learn, and if you’re a developer you might like to learn as many languages as possible, but maybe you’ll lose some time trying to get used to it.</p><h3 id=\"is-it-worth-it\">Is it worth it?</h3><p>Flutter is fun and fast to code a well-designed app. Still has much room to improve to become a real opponent to Android Native.</p><p>For a reasonably modern framework, Flutter has progressed remarkably quick and, surely it will have a word to say in the future for the Mobile App development.</p><p><em>Is it ready to be applied to big scale apps?</em> Likely not, but I’m expecting after these things are fixed, <strong>we can all enjoy Flutter!</strong></p><blockquote>  <p>Well, folks, that is all for now!</p></blockquote><p>This Blog Post was written during my internship at <a href=\"https://picuscreative.com/\">PICUS</a>.</p>",
            "url": "http://localhost:4000/a/flutter-reasons-why-you-will-fall-in-love-with-it",
            
            
            
            
            
            "date_published": "2018-08-21T00:00:00+01:00",
            "date_modified": "2018-08-21T00:00:00+01:00",
            
                "author":  {
                "name": "pmatarodrigues",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}